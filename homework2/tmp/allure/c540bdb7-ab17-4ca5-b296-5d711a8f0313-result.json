{"name": "test_user_authorization_negative_wrong_username", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=99.0.4844.82)\nStacktrace:\n#0 0x55cec27b67d3 <unknown>\n#1 0x55cec2512688 <unknown>\n#2 0x55cec24f23ec <unknown>\n#3 0x55cec2569c9b <unknown>\n#4 0x55cec25790c5 <unknown>\n#5 0x55cec25665a3 <unknown>\n#6 0x55cec253bddc <unknown>\n#7 0x55cec253cde5 <unknown>\n#8 0x55cec27e749d <unknown>\n#9 0x55cec280060c <unknown>\n#10 0x55cec27e9205 <unknown>\n#11 0x55cec2800ee5 <unknown>\n#12 0x55cec27dd070 <unknown>\n#13 0x55cec281c488 <unknown>\n#14 0x55cec281c60c <unknown>\n#15 0x55cec2835c6d <unknown>\n#16 0x7f47e1e62609 <unknown>", "trace": "config = {'browser': 'chrome', 'debug_log': False, 'url': 'https://target.my.com/'}\n\n    @pytest.fixture()\n    def driver(config):\n        browser = config['browser']\n        url = config['url']\n        service = Service(ChromeDriverManager().install())\n        if browser == 'chrome':\n            driver = webdriver.Chrome(service=service)\n        elif browser == 'firefox':\n            driver = webdriver.Firefox(executable_path=GeckoDriverManager().install())\n        else:\n            raise RuntimeError(f'Unsupported browser: \"{browser}\"')\n        driver.get(url)\n>       driver.maximize_window()\n\nui/fixtures.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webdriver.py:821: in maximize_window\n    self.execute(command, params)\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webdriver.py:338: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f54634a06a0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\\\n#14 0x55cec281c60c \\\\u003Cunknown>\\\\n#15 0x55cec2835c6d \\\\u003Cunknown>\\\\n#16 0x7f47e1e62609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, basestring):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=99.0.4844.82)\nE       Stacktrace:\nE       #0 0x55cec27b67d3 <unknown>\nE       #1 0x55cec2512688 <unknown>\nE       #2 0x55cec24f23ec <unknown>\nE       #3 0x55cec2569c9b <unknown>\nE       #4 0x55cec25790c5 <unknown>\nE       #5 0x55cec25665a3 <unknown>\nE       #6 0x55cec253bddc <unknown>\nE       #7 0x55cec253cde5 <unknown>\nE       #8 0x55cec27e749d <unknown>\nE       #9 0x55cec280060c <unknown>\nE       #10 0x55cec27e9205 <unknown>\nE       #11 0x55cec2800ee5 <unknown>\nE       #12 0x55cec27dd070 <unknown>\nE       #13 0x55cec281c488 <unknown>\nE       #14 0x55cec281c60c <unknown>\nE       #15 0x55cec2835c6d <unknown>\nE       #16 0x7f47e1e62609 <unknown>\n\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/errorhandler.py:240: NoSuchWindowException"}, "attachments": [{"name": "log", "source": "57a862cf-80ba-4d0b-85e4-7fff7bd33cca-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "593a5aea-caa3-4095-8860-a8928bad7aa8-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "7dd3a841-d4db-471f-8bf5-2ea6249a8263-attachment.txt", "type": "text/plain"}], "start": 1648649428758, "stop": 1648649428758, "uuid": "10b89808-fa25-4619-9a0b-6ca30daee014", "historyId": "ed93db4ad819442640141d314fee9feb", "testCaseId": "405b07d83bc681f8f38d596201494961", "fullName": "test_login.TestLogin#test_user_authorization_negative_wrong_username", "labels": [{"name": "story", "value": "Вывод сообщения о необходимости ввести почту или телефонпри ошибке ввода"}, {"name": "feature", "value": "Ошибка авторизации при неккоректных данных"}, {"name": "epic", "value": "Авторизация"}, {"name": "tag", "value": "UI"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "doychevvs"}, {"name": "thread", "value": "10987-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_login"}]}